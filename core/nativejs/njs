#!/usr/bin/env node

/*
 * This file is part of NectarJS
 * Copyright (c) 2019 Adrien THIERRY
 * http://nectarjs.com - https://nectrium.com
 *
 * sources : https://github.com/nectarjs/nectarjs
 *
 * NectarJS
 * Copyright (C) 2019 Adrien THIERRY - Necrium
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

global.fs = require('fs');
global.path = require('path');
global.process = require("process");
global.execSync = require('child_process').execSync;
global.COMPILER = {};
global.NECTAR_PATH = __dirname;
global.escodegen = require("escodegen");

var ERROR = false;

var FOLDER = ".nectar";
var OUT = "";
var VERSION = "0.0.1";
var ENGINE = "NativeJS";

var COMPILE_PATH = "";
var COMPILER_ENGINE = "cpp";

var SQUEL;
var AST;
var OPTIONS = "";

var run = false;

try
{
  fs.mkdirSync(FOLDER);
}
catch(e){}

var args = process.argv;
var parseCLI = require('./base/parser/parseCLI.js');
var genCheck = require("./compiler/cpp/gen/genCheck.js");

global.MAIN_PATH = path.dirname(args[1]);
global.APP_PATH = "";
global.AVAILABLE_TARGETS = [];
global.USERLIB = [];
global.LIBS = [];
global.EXPOSE = [];
global.FINAL_CHECK = "";


/*** LIBS ***/
global.replaceAt = require("./base/tools/replaceat.js");
/************/

global.CLI = parseCLI(args);

if(CLI.error)
{
  console.log(CLI.msg);
  process.exit();
}

var ACTION = "build";
if(CLI.cli["--build"]) ACTION = "build";
if(CLI.cli['--version']) ACTION = "version";

switch(ACTION)
{
  case "version":
    console.log();
    console.log("NectarJS - NativeJS core - with " + ENGINE + " - version " + VERSION);
    console.log();
    break;
  case "build":
    Build(CLI);
    break;
  default:
    console.log("Action arguments not recognized");
    break;
}

function Build(CLI)
{
  if(CLI.stack.length < 1)
  {
    console.log("Missing file to compile");
    return;
  }
  if(CLI.cli["--engine"]) COMPILER_ENGINE = CLI.cli["--engine"].argument;

  var file = CLI.stack[CLI.stack.length - 1];

  APP_PATH += path.dirname(path.resolve(file)) + "/";

  /*** COMPILER REQUIRE ***/
  COMPILER = require("./compiler/" + COMPILER_ENGINE + "/compiler.js");
  SQUEL = fs.readFileSync("./compiler/" + COMPILER_ENGINE + "/src/" + COMPILER.Squel).toString();
  /*** END COMPILER REQUIRE ***/

  var outName = path.basename(file).split(".");
  outName.splice(-1).join(".");
  OUT += outName + COMPILER.End;
  SQUEL = COMPILER.Prepare(outName, SQUEL);
  var TO = path.join(FOLDER, OUT);

  var cPath = file.split("/");
  for(var i = 0; i < cPath.length - 1; i++)
  {
    COMPILE_PATH += cPath[i] + "/";
  }
  /* START COMPILATION PHASIS */

  var CHECKDIR = "";
  var _prefix = "";

  if(CLI.cli['--tmp'])
  {
    TO = CLI.cli['--tmp'].argument;
    _prefix = path.dirname(TO) + "/";
    CHECKDIR = _prefix;
  }
  else
  {
    _prefix = COMPILE_PATH;
    CHECKDIR = FOLDER;
  }

  /* TRANSPILE TSC */
  var TS = require("./interface/ts.js");
  file = TS(file);
  /* TRANSPILE TSC */

  /* TRANSPILE PY WITH JIPHY */
  var Python = require("./interface/python.js");
  file = Python(file);
  /* TRANSPILE PY */

  var esprima = require("esprima");
  var result = "";

  var source = fs.readFileSync(file).toString();

  genTarget(file, file, source);

  var CLEAN = esprima.parse(source);
  source = escodegen.generate(CLEAN);


  if(COMPILER.Pre) source = COMPILER.Pre(source);

  source = genStdLib() + source;

  source = genRequire(_prefix, source);

  //genInclude(path.resolve(_prefix) + "/", source);

  source = GENERATED + source;

  if(NJS_ENV.check)
  {
	  genCheck(CHECKDIR);
	
	  var warn = "";
	  /* TEST FILE WITH ESLINT */
	  try
	  {
	    warn = execSync("eslint --no-ignore --fix --config " + FINAL_CHECK + " " + file);
	  }
	  catch(e)
	  {
	    var result = e.stdout.toString();
	    result = "\n" + result.split("\n").splice(2).join("\n");
	    console.error("NectarJS: Compilation Error : \n" + result);
	    process.exit(1);
	  }
	  if(warn.length > 0)
	  {
	    warn = "\n" + warn.toString().split("\n").splice(2).join("\n");
	    console.log("NectarJS: Compilation Warning : \n" + warn);
  	  }
  }

  /* END TEST FILE WITH ESLINT */

  try
  {
    AST = esprima.parse(source);
  }
  catch (e)
  {
    console.error("Parse Error - " + e.message + " at index: " + e.index);
    return;
  }

/*
 var mainAST = [];
 var bodyAST = [];


 for(var a = 0; a < AST.body.length; a++)
 {
   if(AST.body[a].type == "FunctionDeclaration")
     bodyAST.push(AST.body[a]);
   else mainAST.push(AST.body[a]);
 }

 global.WHERE = "MAIN";

 var MAIN = COMPILER.Parse(mainAST);

 WHERE = "BODY";

 var BODY = COMPILER.Parse(bodyAST);





  if(COMPILER.Post) intermediate = COMPILER.Post(MAIN);
  if(COMPILER.Post) intermediate = COMPILER.Post(BODY);

*/
  fnOptimizer(AST);

  // get class
  var sArray = getClass(AST);

  // set class
  setClass(AST.body, sArray);



  var MAIN = COMPILER.Parse(AST);

  var final = SQUEL;
  final = final.replace("__CODE__", INTERMEDIATE).replace("__MAIN__", MAIN).replace("__DECLARATION__", GLOBAL_DECLARATION + DECLARATION);

  final = final.replace("__NECTAR_LIB__", getLibC());

  genGlobal();
  final = final.replace("__GLOBAL_VAR__", GLOBAL_GEN);


  if(CLI.cli['--tmp']) TO = CLI.cli['--tmp'].argument;

  // if ERROR, no compilation
  if(ERROR) return;

  fs.writeFileSync(TO, final);

  var compiler = NJS_ENV.compiler;
  if(CLI.cli['--compiler']) compiler = CLI.cli['--compiler'].argument;

  var target = "none";
  if(CLI.cli['--target']) target = CLI.cli['--target'].argument;

  var option = "";
  if(CLI.cli['--options']) option += CLI.cli['--options'].argument;

  var preset = "none";
  if(CLI.cli['--preset'])
  {
    switch(CLI.cli['--preset'].argument)
    {
      case "size":
        option += " -Os";
        break;
      case "speed":
        option += " -O3";
        break;
      case "normal":
      default:
        break;
    }
  }

  var last = file.split('/');
  last = last[last.length - 1];
  var out = last.split('.')[0];
  if(CLI.cli['-o']) out = CLI.cli['-o'].argument;

  if(CLI.cli['--run'])
  {
    run = true;
  }

  var verbose = false;
  if(CLI.cli['--verbose'] || CLI.cli['-v']) verbose = true;

  if(verbose)
  {
    console.log( COMPILER.CLI(compiler, out, TO, target, option) );
  }
  if(CLI.cli['--gen'])
  {
    console.log("[+] Generation successful");
  }
  else
  {
    var state = true;
    try
    {
      var eResult = execSync( COMPILER.CLI(compiler, out, TO, option) ).toString();
      if(eResult.length > 0) console.log(eResult);
    }
    catch(e)
    {
      if(!CLI.cli['--conserve'])
      {
        try
        {
          fs.unlinkSync(TO);
        }catch(e){}
      }
      try
      {
        fs.unlinkSync(out);
      }catch(e){}
      state = false;
    }
    if(state && run)
    {
      try
      {
        var bResult = execSync( COMPILER.Run(out) ).toString();
        if(bResult.length > 0) console.log(bResult);
      }
      catch (e)
      {
        console.dir(e);
        // cleanup
      }

      //fs.unlinkSync(out);
    }
    try
    {
      if(!CLI.cli['--conserve']) fs.unlinkSync(TO);
    }catch(e){}

  }
}
